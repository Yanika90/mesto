(()=>{"use strict";var t=document.querySelector(".popup_type_edit-profile"),e=document.querySelector(".popup_type_add-card"),r=document.querySelector(".popup_type_avatar-edit"),n=document.querySelector(".profile__edit-button"),o=document.querySelector(".profile__avatar-edit"),i=document.querySelector(".profile__add-button"),u=document.querySelector(".popup__input_type_name"),c=document.querySelector(".popup__input_type_about-yourself");function a(t){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a(t)}function l(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==a(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===a(o)?o:String(o)),n)}var o}var s=function(){function t(e,r,n,o){var i=o.handleCardClick,u=o.handleDeleteCardClick,c=o.handleLikeClick,a=o.handleLikeDeliteClick;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=e.name,this._alt=e.name,this._link=e.link,this._likes=e.likes,this._likesId=e.likes._id,this._cardId=e._id,this._ownerId=e.owner._id,this._userId=r,this._cardTemplateSelector=n,this._handleCardClick=i,this._handleDeleteCardClick=u,this._handleLikeClick=c,this._handleLikeDeliteClick=a,console.log(this._cardId)}var e,r;return e=t,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardTemplateSelector).content.querySelector(".photo").cloneNode(!0)}},{key:"deleteCard",value:function(){this._card.remove(),this._card=null}},{key:"isLiked",value:function(){return this._cardLikeButton.classList.contains("photo__like-button_active")}},{key:"likeCard",value:function(t){this._cardLikeCounter.textContent=t,this._cardLikeButton.classList.toggle("photo__like-button_active")}},{key:"_setEventListeners",value:function(){var t=this;this._cardDeleteButton.addEventListener("click",(function(){t._handleDeleteCardClick(t)})),this._cardLikeButton.addEventListener("click",(function(){t._handleLikeClick(t)})),this._cardImage.addEventListener("click",(function(){t._handleCardClick({name:t._name,link:t._link})}))}},{key:"generateCard",value:function(){var t=this;return this._card=this._getTemplate(),this._cardTitle=this._card.querySelector(".photo__title"),this._cardImage=this._card.querySelector(".photo__image"),this._cardDeleteButton=this._card.querySelector(".photo__delete-button"),this._cardLikeButton=this._card.querySelector(".photo__like-button"),this._cardLikeCounter=this._card.querySelector(".photo__like-count"),this._cardTitle.textContent=this._name,this._cardImage.setAttribute("src",this._link),this._cardImage.setAttribute("alt",this._alt),this._cardLikeCounter.textContent=this._likes.length,this._setEventListeners(),this._userId!==this._ownerId&&this._cardDeleteButton.remove(),this._likes.forEach((function(e){e._id===t._userId&&t._cardLikeButton.classList.add("photo__like-button_active")})),this._card}}])&&l(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}(),f={formSelector:".popup__input-form",inputSelector:".popup__input",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_type_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_type_active"};function p(t){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},p(t)}function y(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,h(n.key),n)}}function d(t,e,r){return(e=h(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function h(t){var e=function(t,e){if("object"!==p(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==p(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===p(e)?e:String(e)}var m=function(){function t(e,r){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),d(this,"_showInputError",(function(t,e){var r=n._formElement.querySelector(".".concat(t.id,"-error"));t.classList.add(n._inputErrorClass),r.classList.add(n._errorClass),r.textContent=e})),d(this,"_hideInputError",(function(t){var e=n._formElement.querySelector(".".concat(t.id,"-error"));t.classList.remove(n._inputErrorClass),e.classList.remove(n._errorClass),e.textContent=""})),d(this,"_checkInputValidity",(function(t){t.validity.valid?n._hideInputError(t):n._showInputError(t,t.validationMessage)})),d(this,"_toggleButtonState",(function(){n._hasInvalidInput(n._inputList)?(n._buttonElement.classList.add(n._inactiveButtonClass),n._buttonElement.disabled=!0):(n._buttonElement.classList.remove(n._inactiveButtonClass),n._buttonElement.disabled=!1)})),d(this,"_setEventListeners",(function(){n._inputList=Array.from(n._formElement.querySelectorAll(n._inputSelector)),n._buttonElement=n._formElement.querySelector(n._submitButtonSelector),n._toggleButtonState(),n._inputList.forEach((function(t){t.addEventListener("input",(function(){n._checkInputValidity(t),n._toggleButtonState()}))}))})),d(this,"resetFormError",(function(){n._inputList.forEach((function(t){n._hideInputError(t)})),n._toggleButtonState()})),d(this,"enableValidation",(function(){n._formElement.addEventListener("submit",(function(t){t.preventDefault()})),n._setEventListeners()})),this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=r}var e,r;return e=t,(r=[{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(t){return!t.validity.valid}))}}])&&y(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function _(t){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_(t)}function v(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==_(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==_(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===_(o)?o:String(o)),n)}var o}var b=function(){function t(e,r){var n=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._renderer=n,this._container=document.querySelector(r)}var e,r;return e=t,(r=[{key:"addItem",value:function(t){this._container.prepend(t)}},{key:"renderItems",value:function(t){var e=this;t.forEach((function(t){return e._renderer(t)}))}}])&&v(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function S(t){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},S(t)}function g(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==S(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==S(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===S(o)?o:String(o)),n)}var o}var k=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._popup=document.querySelector(e),this._handleClosePopupEsc=this._handleClosePopupEsc.bind(this)}var e,r;return e=t,(r=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleClosePopupEsc)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleClosePopupEsc)}},{key:"_handleClosePopupEsc",value:function(t){"Escape"===t.key&&this.close()}},{key:"setEventListeners",value:function(){var t=this;this._popup.addEventListener("mousedown",(function(e){e.target.classList.contains("popup_opened")&&t.close(),e.target.classList.contains("popup__close-button")&&t.close()}))}}])&&g(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function w(t){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},w(t)}function E(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==w(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==w(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===w(o)?o:String(o)),n)}var o}function C(){return C="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=j(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},C.apply(this,arguments)}function P(t,e){return P=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},P(t,e)}function j(t){return j=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},j(t)}var O=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&P(t,e)}(u,t);var e,r,n,o,i=(n=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=j(n);if(o){var r=j(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===w(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(e=i.call(this,t))._imagePopup=e._popup.querySelector(".popup__image"),e._imageTitle=e._popup.querySelector(".popup__image-title"),e}return e=u,(r=[{key:"open",value:function(t){C(j(u.prototype),"open",this).call(this),this._imageTitle.textContent=t.name,this._imagePopup.src=t.link,this._imagePopup.alt=t.name}}])&&E(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),u}(k);function L(t){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},L(t)}function I(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==L(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==L(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===L(o)?o:String(o)),n)}var o}function T(){return T="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=B(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},T.apply(this,arguments)}function R(t,e){return R=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},R(t,e)}function B(t){return B=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},B(t)}var q=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&R(t,e)}(u,t);var e,r,n,o,i=(n=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=B(n);if(o){var r=B(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===L(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e){var r,n=e.handleSubmitForm;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(r=i.call(this,t))._popupForm=r._popup.querySelector(".popup__input-form"),r._inputList=r._popupForm.querySelectorAll(".popup__input"),r._submitButton=r._popupForm.querySelector(".popup__save-button"),r._submitButtonText=r._submitButton.textContent,r._handleSubmitForm=n,r}return e=u,(r=[{key:"_getInputValues",value:function(){var t=this;return this._inputValues={},this._inputList.forEach((function(e){t._inputValues[e.name]=e.value})),console.log(this._inputValues),this._inputValues}},{key:"setEventListeners",value:function(){var t=this;T(B(u.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",(function(e){e.preventDefault(),t._handleSubmitForm(t._getInputValues())}))}},{key:"close",value:function(){T(B(u.prototype),"close",this).call(this),this._popupForm.reset()}},{key:"renderLoading",value:function(t){this._submitButton.textContent=t?"Сохранение...":this._submitButtonText}}])&&I(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),u}(k);function A(t){return A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},A(t)}function x(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==A(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==A(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===A(o)?o:String(o)),n)}var o}function D(){return D="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=U(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},D.apply(this,arguments)}function F(t,e){return F=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},F(t,e)}function U(t){return U=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},U(t)}var V=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&F(t,e)}(u,t);var e,r,n,o,i=(n=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=U(n);if(o){var r=U(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===A(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(e=i.call(this,t))._popupForm=e._popup.querySelector(".popup__input-form"),e}return e=u,(r=[{key:"setEventListeners",value:function(){var t=this;D(U(u.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",(function(e){e.preventDefault(),t._callbackSubmitForm()}))}},{key:"setSubmitAction",value:function(t){this._callbackSubmitForm=t}}])&&x(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),u}(k);function N(t){return N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},N(t)}function Y(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==N(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==N(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===N(o)?o:String(o)),n)}var o}var J,G=function(){function t(e){var r=e.userNameSelector,n=e.userAboutSelector,o=e.userAvatarSelector;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._userNameInput=document.querySelector(r),this._userAboutYourselfInput=document.querySelector(n),this._userAvatarInput=document.querySelector(o)}var e,r;return e=t,(r=[{key:"getUserInfo",value:function(){return{name:this._userNameInput.textContent,about:this._userAboutYourselfInput.textContent}}},{key:"setUserInfo",value:function(t){this._userNameInput.textContent=t.name,this._userAboutYourselfInput.textContent=t.about}},{key:"setUserAvatar",value:function(t){this._userAvatarInput.src=t}}])&&Y(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function H(t){return H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},H(t)}function M(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==H(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==H(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===H(o)?o:String(o)),n)}var o}function z(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var $=new(function(){function t(e){var r=e.url,n=e.headers;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._url=r,this._headers=n}var e,r;return e=t,(r=[{key:"_checkResponse",value:function(t){return t.ok?t.json():Promise.reject("Ошибка: ".concat(t.status))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._url,"/users/me"),{method:"GET",headers:this._headers}).then(this._checkResponse)}},{key:"editUserInfo",value:function(t){return fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t.userNameInput,about:t.userAboutYourselfInput})}).then(this._checkResponse)}},{key:"editUserAvatar",value:function(t){return fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t.avatarLinkInput})}).then(this._checkResponse)}},{key:"getPhotoCards",value:function(){return fetch("".concat(this._url,"/cards"),{method:"GET",headers:this._headers}).then(this._checkResponse)}},{key:"addCard",value:function(t){return fetch("".concat(this._url,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:t.name,link:t.link})}).then(this._checkResponse)}},{key:"deleteCard",value:function(t){return fetch("".concat(this._url,"/cards/").concat(t._id),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}},{key:"likeCard",value:function(t){return fetch("".concat(this._url,"/cards/").concat(t,"/likes"),{method:"PUT",headers:this._headers}).then(this._checkResponse)}},{key:"dislikeCard",value:function(t){return fetch("".concat(this._url,"/cards/").concat(t,"/likes"),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}])&&M(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}())({url:"https://mesto.nomoreparties.co/v1/cohort-65",headers:{authorization:"e368c92f-c32b-427b-8564-6fade10747a3","Content-Type":"application/json"}});Promise.all([$.getUserInfo(),$.getPhotoCards()]).then((function(t){var e,r,n=(r=2,function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,u,c=[],a=!0,l=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;a=!1}else for(;!(a=(n=i.call(r)).done)&&(c.push(n.value),c.length!==e);a=!0);}catch(t){l=!0,o=t}finally{try{if(!a&&null!=r.return&&(u=r.return(),Object(u)!==u))return}finally{if(l)throw o}}return c}}(e,r)||function(t,e){if(t){if("string"==typeof t)return z(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?z(t,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=n[0],i=n[1];J=o._id,X.setUserInfo(o),X.setUserAvatar(o.avatar),rt.renderItems(i)})).catch((function(t){console.log("Ошибка сервера: ".concat(t))}));var K=new m(f,t);K.enableValidation();var Q=new m(f,e);Q.enableValidation();var W=new m(f,r);W.enableValidation();var X=new G({userNameSelector:".profile__name",userAboutSelector:".profile__about-yourself",userAvatarSelector:".profile__avatar"}),Z=new q(".popup_type_edit-profile",{handleSubmitForm:function(t){Z.renderLoading(!0),$.editUserInfo(t).then((function(t){X.setUserInfo(t),Z.close()})).catch((function(t){console.log("При редактировании профиля возникла ошибка: ".concat(t))})).finally((function(){Z.renderLoading(!1)}))}});Z.setEventListeners(),n.addEventListener("click",(function(){Z.open();var t=X.getUserInfo();u.value=t.name,c.value=t.about,K.resetFormError()}));var tt=new q(".popup_type_avatar-edit",{handleSubmitForm:function(t){tt.renderLoading(!0),$.editUserAvatar(t).then((function(t){X.setUserAvatar(t.avatar),tt.close()})).catch((function(t){console.log("При изменении аватара возникла ошибка: ".concat(t))})).finally((function(){tt.renderLoading(!1)}))}});tt.setEventListeners(),o.addEventListener("click",(function(){tt.open(),W.resetFormError()}));var et=new q(".popup_type_add-card",{handleSubmitForm:function(t){var e=t.placeNameInput,r=t.placeLinkInput;et.renderLoading(!0),$.addCard({name:e,link:r}).then((function(t){rt.addItem(nt(t)),et.close()})).catch((function(t){console.log("При добавлении карточки возникла ошибка: ".concat(t))})).finally((function(){et.renderLoading(!1)}))}});et.setEventListeners(),i.addEventListener("click",(function(){et.open(),Q.resetFormError()}));var rt=new b({renderer:function(t){rt.addItem(nt(t))}},".photos");function nt(t){var e=new s(t,J,"#cardTemplate",{handleCardClick:function(t){ot.open(t)},handleDeleteCardClick:function(e){it.open(),it.setSubmitAction((function(){$.deleteCard(t).then((function(t){e.deleteCard(t),it.close()})).catch((function(t){console.log("При удалении карточки возникла ошибка: ".concat(t))}))}))},handleLikeClick:function(){e.isLiked()?$.dislikeCard(t._id).then((function(t){e.likeCard(t.likes.length)})).catch((function(t){console.log("При удалении лайка возникла ошибка: ".concat(t))})):$.likeCard(t._id).then((function(t){e.likeCard(t.likes.length)})).catch((function(t){console.log("При добавлении лайка возникла ошибка: ".concat(t))}))}});return e.generateCard()}var ot=new O(".popup_type_image-open");ot.setEventListeners();var it=new V(".popup_type_image-delete");it.setEventListeners()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,